import asyncio
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from .routers import xur, general, manifest
from .manifest_manager import update_manifest_if_needed

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Variable globale pour la t√¢che p√©riodique
periodic_task = None

async def periodic_manifest_update():
    """T√¢che p√©riodique pour mettre √† jour le manifest chaque semaine"""
    while True:
        try:
            logger.info("üîÑ Mise √† jour p√©riodique du manifest...")
            await update_manifest_if_needed()
            logger.info("‚úÖ Mise √† jour p√©riodique termin√©e")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la mise √† jour p√©riodique: {e}")
        
        # Attendre 7 jours (604800 secondes)
        await asyncio.sleep(604800)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie de l'application"""
    global periodic_task
    
    # Startup
    logger.info("üöÄ D√©marrage de l'API Orbit Market...")
    
    # T√©l√©charger le manifest au d√©marrage
    logger.info("üì• T√©l√©chargement initial du manifest...")
    try:
        await update_manifest_if_needed()
        logger.info("‚úÖ Manifest initialis√© avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation du manifest: {e}")
        logger.warning("‚ö†Ô∏è L'API continuera de fonctionner mais certaines fonctionnalit√©s peuvent √™tre limit√©es")
    
    # D√©marrer la t√¢che p√©riodique
    logger.info("‚è∞ D√©marrage de la mise √† jour hebdomadaire du manifest...")
    periodic_task = asyncio.create_task(periodic_manifest_update())
    
    yield
    
    # Shutdown
    logger.info("üõë Arr√™t de l'API...")
    if periodic_task:
        periodic_task.cancel()
        try:
            await periodic_task
        except asyncio.CancelledError:
            logger.info("‚úÖ T√¢che p√©riodique arr√™t√©e")

app = FastAPI(
    title="Orbit Market API",
    description="API pour r√©cup√©rer les donn√©es des vendeurs de Destiny 2",
    version="1.0.0",
    lifespan=lifespan
)

# Configuration CORS pour Vercel
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include all routers
app.include_router(general.router)
app.include_router(xur.router)
app.include_router(manifest.router)
